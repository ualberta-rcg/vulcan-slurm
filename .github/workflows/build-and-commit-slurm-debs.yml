name: Build and Commit Slurm DEB Packages

on:
  workflow_dispatch:
    inputs:
      SLURM_VERSION_OVERRIDE:
        description: 'Optional: Specific Slurm version to build (e.g., 24-11-5-1). Leave empty to use latest.'
        required: false
        default: ''
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-debs:
    runs-on: ubuntu-22.04  # Host runner (required by GitHub Actions)
    container: 
      image: debian:bullseye-slim
      options: --user root  # Run as root for build process

    outputs:
      version: ${{ steps.vars.outputs.version }}
      skip_build: ${{ steps.version-check.outputs.skip_build }}

    steps:
      - name: 🐛 Debug Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event type: ${{ github.event.type }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Job: ${{ github.job }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Current time: $(date)"
          echo "UTC time: $(date -u)"
          echo "User: $(whoami)"
          echo "UID: $(id -u)"
          
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: 🎯 Determine Target Slurm Version
        id: vars
        run: |
          set -e # Exit on error

          apt-get update

          apt-get install jq curl -y
          
          # Check if this is a manual dispatch with version override
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.SLURM_VERSION_OVERRIDE }}" ]; then
            echo "✅ Using manual dispatch version override: ${{ github.event.inputs.SLURM_VERSION_OVERRIDE }}"
            VERSION="${{ github.event.inputs.SLURM_VERSION_OVERRIDE }}"
          else
            echo "🔍 No version override set. Detecting latest stable version..."
            
            # Fetch all tags from the SchedMD/slurm repo
            TAGS=$(curl -s https://api.github.com/repos/SchedMD/slurm/tags | jq -r '.[].name')

            # Filter for stable release tags (e.g., slurm-23-11-7-1) and get the latest
            LATEST_TAG=$(echo "$TAGS" \
            | grep -E '^slurm-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' \
            | sort -V \
            | tail -n1)

            if [ -z "$LATEST_TAG" ]; then
              echo "❌ Could not determine the latest Slurm tag."
              exit 1
            fi

            VERSION="${LATEST_TAG#slurm-}"
            echo "🔬 Detected latest version: $VERSION"
          fi
          
          # Construct the tag name and download URL
          TAG_NAME="slurm-${VERSION}"
          TARBALL_URL="https://codeload.github.com/SchedMD/slurm/tar.gz/refs/tags/${TAG_NAME}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tarball_url=${TARBALL_URL}" >> $GITHUB_OUTPUT
          
      - name: 🛑 Check if DEBs for this version already exist
        id: version-check
        run: |
          version="${{ steps.vars.outputs.version }}"
          debver="$(echo "$version" | sed 's/^\([0-9]*\)-\([0-9]*\)-\([0-9]*\)-\([0-9]*\)$/\1.\2.\3-\4/')"
          debdir="$GITHUB_WORKSPACE/slurm-debs"
          OS_CODENAME="b11"  

          echo "🔍 Inputs:"
          echo "  Raw version       = $version"
          echo "  Debian version    = $debver"
          echo "  Search directory  = $debdir"
          echo "  Search pattern    = *_${debver}_*_${OS_CODENAME}.deb"

          mkdir -p "$debdir"
          echo "📂 Directory contents before search:"
          ls -l "$debdir" || true

          count=$(find "$debdir" -type f -name "*_${debver}_*_${OS_CODENAME}.deb" | wc -l || true)

          if [ "$count" -gt 0 ]; then
            echo "✅ DEBs for Slurm $version already exist. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "🚧 No existing DEBs for Slurm $version. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🛠 Install Build Dependencies
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          apt-get update
          echo "🔍 Checking available packages in Debian Bullseye..."
          apt-cache policy devscripts equivs build-essential fakeroot debhelper curl jq git libpmix-dev libpmix2 libopenmpi-dev libopenmpi3 openmpi-bin
          echo "📦 Installing build dependencies..."
          apt-get install -y \
            devscripts equivs build-essential fakeroot debhelper curl jq git \
            libpmix-dev libpmix2 libopenmpi-dev libopenmpi3 openmpi-bin

      - name: 📥 Download and Extract Slurm Source
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          set -e
          mkdir -p /tmp/slurm && cd /tmp/slurm
          echo "Downloading from ${{ steps.vars.outputs.tarball_url }}"
          curl -L "${{ steps.vars.outputs.tarball_url }}" -o slurm.tar.gz
          tar -xzf slurm.tar.gz
          src_dir=$(find . -maxdepth 1 -type d -name "slurm-*")
          mv "$src_dir" slurm-src

      - name: 📦 Build Slurm DEBs
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          set -e
          cd /tmp/slurm/slurm-src
          # Use mk-build-deps to install dependencies from debian/control
          mk-build-deps -ir --tool='apt-get -qq -y ' debian/control
          # Build binary packages only, without signing
          debuild -b -uc -us

      - name: 📁 Rename and Move DEBs to Repo
        if: steps.version-check.outputs.skip_build == 'false'
        run: |
          set -e
          OS_CODENAME="b11" # Debian Bullseye
          DEST_DIR="$GITHUB_WORKSPACE/slurm-debs"
          mkdir -p "$DEST_DIR"
          
          # Move all .deb files from the parent directory
          for deb in /tmp/slurm/*.deb; do
            base=$(basename "$deb" .deb)
            mv "$deb" "$DEST_DIR/${base}_${OS_CODENAME}.deb"
          done
          echo "Moved DEBs to $DEST_DIR"
          ls -l "$DEST_DIR"

  # Git operations run on the host runner (outside container)
  commit-debs:
    needs: build-debs
    runs-on: ubuntu-22.04
    if: needs.build-debs.outputs.skip_build == 'false'
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📤 Commit and Push DEBs
        run: |
          set -e
          OS_CODENAME="b11" # Debian Bullseye
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add slurm-debs/
          # Check if there are staged changes before committing
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Add Slurm DEBs (v${{ needs.build-debs.outputs.version }}) for Debian Bullseye (${OS_CODENAME})"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
